/*!
 * SpaUtils
 * Date: 2022-04-19 17:16
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.SpaUtils = {}));
})(this, (function (exports) { 'use strict';

  /*!
   * 单页工具函数v2.0.0
   * 代替util.js
   * utils.js函数没有前缀，全部函数都放在window下，调用时无法知晓函数来自于哪个js 使用umd带上前缀就一目了然了
   * 兼容utils.js的放在window的写法，但是不推荐使用
   * @author: dyh
   * @date: 2021-12-17
   */

  /**
   * @param msg {string}
   * @param time {number?}
   */
  exports.toast = function toast(msg, time) {
    if (time === void 0) {
      time = 2500;
    }

    if (window.vant) {
      vant.Toast({
        type: "text",
        message: msg,
        duration: time
      });
    } else if (window.layer) {
      layer.msg(msg, {
        time: time
      });
    }
  };
  function replaceToast(fn) {
    if (window.toast === exports.toast) {
      window.toast = fn;
    }

    exports.toast = fn;
  }
  /**
   * 判断是否已滚动到底部
   * @param el {HTMLElement}
   * @param direct {"vertical"|"horizontal"?}
   * @param offset {number?}
   * @returns {boolean}
   */

  function isScrollEnd(el, direct, offset) {
    if (direct === void 0) {
      direct = "vertical";
    }

    if (offset === void 0) {
      offset = 10;
    }

    var width;
    var height;

    if (el === window) {
      if (document.body.scrollTop) {
        el = document.body;
      } else {
        el = document.documentElement;
      }

      width = document.documentElement.clientWidth;
      height = document.documentElement.clientHeight;

      if (direct === "vertical") {
        offset = Math.max(150, offset);
      }
    } else {
      width = el.clientWidth;
      height = el.clientHeight;
    }

    var scrollTop = el.scrollTop;
    var scrollLeft = el.scrollLeft;
    var scrollHeight = el.scrollHeight;
    var scrollWidth = el.scrollWidth;

    if (direct === "vertical") {
      return scrollTop >= scrollHeight - height - offset;
    } else {
      return scrollLeft >= scrollWidth - width - offset;
    }
  }
  /**
   * 判断是否是dom
   * @param target {any}
   */

  var isDom = function () {
    return typeof HTMLElement === "object" ? function (target) {
      return target instanceof HTMLElement;
    } : function (target) {
      return target && typeof target === "object" && target.nodeType === 1 && typeof target.nodeName === "string";
    };
  }();
  /**
   * 手动添加img标签下载图片
   * @param url {string}
   * @returns {Promise}
   */

  function loadImg(url) {
    return new Promise(function (resolve, reject) {
      var img = document.createElement("img");
      var parent = document.body;
      img.style.display = "none";

      img.onload = function (ev) {
        parent.removeChild(img);
        resolve();
      };

      img.onabort = img.onerror = function (ev) {
        parent.removeChild(img);
        reject(ev);
      };

      img.src = url;
      parent.append(img);
    });
  }
  /**
   * 选中html
   * @param element {HTMLElement}
   * @return {string}
   */

  function select(element) {
    var selectedText;

    if (element.nodeName === "SELECT") {
      element.focus();
      selectedText = element.value;
    } else if (element.nodeName === "INPUT" || element.nodeName === "TEXTAREA") {
      var isReadOnly = element.hasAttribute("readonly");

      if (!isReadOnly) {
        element.setAttribute("readonly", "");
      }

      element.select();
      element.setSelectionRange(0, element.value.length);

      if (!isReadOnly) {
        element.removeAttribute("readonly");
      }

      selectedText = element.value;
    } else {
      if (element.hasAttribute("contenteditable")) {
        element.focus();
      }

      var selection = window.getSelection();
      var range = document.createRange();
      range.selectNodeContents(element);
      selection.removeAllRanges();
      selection.addRange(range);
      selectedText = selection.toString();
    }

    return selectedText;
  }
  /**
   * 复制文字或html
   * @param element {HTMLElement | string}
   * @param successMsg {string | false | void}
   * @param errorMsg {string?}
   * @param isFromCopy {boolean?}
   * @return {Promise}
   */

  function copy(element, successMsg, errorMsg, isFromCopy) {
    var that = this;
    var isBindThis = isDom(that);

    if (isBindThis) {
      return new Promise(function (res, rej) {
        var parentHandler = function parentHandler() {
          copy(element, successMsg, errorMsg, isFromCopy).then(res, rej);
          that.parentNode.removeEventListener("click", parentHandler);
        };

        that.parentNode.addEventListener("click", parentHandler);
      });
    }

    var isText = typeof element === "string";

    if (isText) {
      var text = element;
      element = document.createElement("div");
      element.innerText = text;
      element.style.position = "fixed";
      element.style.left = "-100000px";
      document.body.appendChild(element);
    } else if (!isDom(element)) {
      throw new TypeError("copy element type error");
    }

    var p = new Promise(function (resolve, reject) {
      select(element);
      var succeeded;

      try {
        succeeded = document.execCommand("copy");
      } catch (err) {
        console.log(err);
        succeeded = false;
      }

      if (succeeded) {
        successMsg !== false && exports.toast(successMsg || "复制成功!");
        resolve();
        return;
      }

      if (isFromCopy) {
        exports.toast(errorMsg || "复制失败，请稍后重试!");
        reject();
        return;
      }

      vant.Dialog.alert({
        message: "点击复制",
        confirmButtonText: "复制",
        theme: "round-button"
      }).then(function () {
        copy(element, successMsg, errorMsg, true).then(resolve, reject);
      });
    });
    p["finally"](function () {
      window.getSelection().removeAllRanges();

      if (isText) {
        document.body.removeChild(element);
      }
    });
    return p;
  }
  var copyText = copy;
  /**
   * 判断是否固定在顶部的条件
   * @param target {HTMLElement}
   * @param cb {Function}
   * @param container {HTMLElement?}
   * @param top {number?}
   * @return {function(): void}
   */

  function isFixed(target, cb, top, container) {
    var wrapper = container || window;
    var getScrollTop = wrapper === window ? function () {
      return document.documentElement.scrollTop || document.body.scrollTop;
    } : function () {
      return wrapper.scrollTop;
    };
    var rect = target.getBoundingClientRect();
    var distanceTop = rect.top + getScrollTop() - (top || 0);
    var handler;
    cb(getScrollTop() >= distanceTop);
    wrapper.addEventListener("scroll", handler = function handler() {
      // 当滑动距离大于等于分类距离顶部位置时，则固定定位
      cb(getScrollTop() >= distanceTop);
    });
    return function () {
      wrapper.removeEventListener("scroll", handler);
    };
  }
  /**
   * 从object里挑选出pickKeys中包含的key的object
   * @param originObj {object}
   * @param pickKeys {array}
   * @param cb {function?}
   * @returns {object}
   */

  function pickByKeys(originObj, pickKeys, cb) {
    var callback = cb || function (v) {
      return v;
    };

    return pickKeys.reduce(function (res, key) {
      if (originObj.hasOwnProperty(key)) res[key] = callback(originObj[key], key, originObj);
      return res;
    }, {});
  }
  /**
   * 从object里挑选出renamePickObj中包含的key的object并重命名
   * @param originObj {object}
   * @param renamePickObj {object}
   * @param cb {function?}
   * @returns {object}
   */

  function pickRename(originObj, renamePickObj, cb) {
    var callback = cb || function (v) {
      return v;
    };

    var renames = Object.keys(renamePickObj);
    return renames.reduce(function (result, rename) {
      var pick = renamePickObj[rename];

      if (originObj.hasOwnProperty(pick)) {
        result[rename] = callback(originObj[pick], pick, originObj);
      }

      return result;
    }, {});
  }
  /**
   * 禁止滚动
   * @param scrollContainer {Window | HTMLElement | string | undefined}
   * @return function
   */

  function noScroll(scrollContainer) {
    scrollContainer = scrollContainer || window;
    var target = scrollContainer;

    if (typeof scrollContainer === "string") {
      target = document.querySelector(scrollContainer);
      if (!target) throw new TypeError();
    } else if (scrollContainer === window) {
      if (document.documentElement.scrollTop) {
        target = document.documentElement;
      } else {
        target = document.body;
      }
    }

    var last = pickByKeys(target.style, ["marginTop", "overflow"]);
    var scrollTop = target.scrollTop;
    target.scrollTop = 0;
    target.style.overflow = "hidden";
    target.style.marginTop = -scrollTop + "px";
    return function () {
      target.scrollTop = scrollTop;
      Object.assign(target.style, last);
    };
  }
  /**
   * 获取数据类型
   * @param target {any}
   * @return {string|"array"|"undefined"|"boolean"|"number"|"string"|"function"|"symbol"|"bigint"}
   */

  function typeOf(target) {
    var tp = typeof target;
    if (tp !== "object") return tp;
    return Object.prototype.toString.call(target).slice(8, -1).toLowerCase();
  }
  /**
   * 解析url search部分
   * @param {string?} [url = location.href] url必须带?
   * @return {{}}
   */

  function parseSearch(url) {
    var searchStr = url || location.href;
    var result = {}; // 去除?号前的

    searchStr = searchStr.split("?")[1];
    if (!searchStr) return result; // 去掉hash

    searchStr = searchStr.split("#")[0];
    var params = searchStr.split("&");

    for (var k in params) {
      var v = params[k];

      var _a = v.split("=").map(function (item) {
        return decodeURIComponent(item);
      });

      var key = _a[0],
          value = _a[1];
      key = key.replace(/\[\w*\]/g, "");
      var resultValue = result[key];

      switch (typeOf(resultValue)) {
        case "undefined":
          result[key] = value;
          break;

        case "array":
          result[key].push(value);
          break;

        default:
          result[key] = [resultValue, value];
      }
    }

    return result;
  }
  parseSearch.current = parseSearch();
  /**
   *
   * @param method {"get"|"post"}
   * @param url {string}
   * @param data {object?}
   * @param callback {function?}
   * @param others {object?}
   * @returns {{ajax:any,promise:Promise}}
   */

  function Request(method, url, data, callback, others) {
    var ajax;
    var promise = new Promise(function (resolve, reject) {
      var param = {
        url: url,
        type: method,
        data: data,
        dataType: "json",
        timeout: 10000,
        success: function success(res) {
          if (Request.successCodes.indexOf(Number(res.code)) > -1) {
            callback && callback(res);
            resolve(res);
          } else {
            exports.toast(res.msg);
            reject(res);
          }
        },
        error: function error(e) {
          if (e.statusText !== "abort") {
            exports.toast("网络错误，请检查网络重试");
          }

          reject(e);
        }
      };
      ajax = $.ajax(Object.assign({}, param, others));
    });
    return {
      ajax: ajax,
      promise: promise
    };
  }
  Request.successCodes = [200, 1];
  /**
   * @param url {string}
   * @param data {object?}
   * @returns {{ajax:any,promise:Promise}}
   */

  Request.get = function (url, data) {
    return Request("get", url, data);
  };
  /**
   * @param url {string}
   * @param callback {function}
   * @param data {object}
   * @returns {{ajax:any,promise:Promise}}
   */


  Request.getSync = function (url, data, callback) {
    return Request("get", url, data, callback, {
      async: false
    });
  };
  /**
   * @param url {string}
   * @param data {object?}
   * @returns {{ajax:any,promise:Promise}}
   */


  Request.post = function (url, data) {
    return Request("post", url, data);
  };
  /**
   * @param url {string}
   * @param data {object}
   * @param callback {function}
   * @returns {{ajax:any, promise:Promise}}
   */


  Request.postSync = function (url, data, callback) {
    return Request("post", url, data, callback, {
      async: false
    });
  };

  if (!Object.assign) {
    Object.assign = function () {
      var result = [].shift.call(arguments);
      [].forEach.call(arguments, function (v) {
        for (var k in v) {
          result[k] = v[k];
        }
      });
      return result;
    };
  }

  var protocol = /(https?)/i.test(window.location.protocol) ? RegExp.$1 : "http";
  /**
   * @param url {string}
   * @return {string}
   */

  function addProtocol(url) {
    return protocol + "://" + url;
  }
  var url = addProtocol;
  /**
   * 格式化日期  到date原型上用 不能import导入调用 或者用call apply
   * @param format {string?}
   * @returns string
   */

  function formatDate(format) {
    if (!format) format = "yyyy-MM-dd hh:mm:ss";
    var o = {
      "M+": this.getMonth() + 1,
      //月份
      "d+": this.getDate(),
      //日
      "h+": this.getHours(),
      //小时
      "m+": this.getMinutes(),
      //分
      "s+": this.getSeconds() //秒

    };

    if (/(y+)/.test(format)) {
      format = format.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    }

    for (var k in o) {
      if (new RegExp("(" + k + ")").test(format)) {
        var s1 = RegExp.$1;
        var v = o[k];
        var value = s1.length === 1 ? v : ("00" + v).substr(String(v).length);
        format = format.replace(s1, value);
      }
    }

    return format;
  }
  Date.prototype.format = formatDate; // 给不能用``模板字符串的环境使用
  // es5的格式化字符串 example: getFormatStr("11%s111%s", 3, 4) => "1131114"

  function getFormatStr() {
    // es5; typescript不需要str, ...params参数
    var args = Array.prototype.slice.call(arguments, 0);
    if (!args.length) return "";
    var str = args[0];
    var params = args.slice(1);
    return str.replace(/%s/g, function () {
      return params.length ? params.shift() : "";
    });
  }
  var elementStyle = document.createElement("div").style;

  var vendor = function () {
    var transformName = {
      webkit: "webkitTransform",
      Moz: "MozTransform",
      O: "OTransform",
      ms: "msTransform",
      standard: "transform"
    };

    for (var key in transformName) {
      if (elementStyle[transformName[key]] !== undefined) {
        return key;
      }
    }

    return false;
  }();
  /**
   * 判断是什么种类的浏览器并返回拼接前缀后的数据
   * @param style {string}
   * @returns {string | boolean}
   */


  function prefixStyle(style) {
    if (vendor === false) {
      return false;
    }

    if (vendor === "transform") {
      return style;
    }

    return vendor + style.charAt(0).toUpperCase() + style.substr(1);
  }
  /**
   * 判断是否支持css
   * @param key {string}
   * @param value {string}
   * @returns {boolean}
   */

  function cssSupport(key, value) {
    if (key in elementStyle) {
      elementStyle[key] = value;
      return elementStyle[key] === value;
    } else {
      return false;
    }
  }
  var cancelHandleObj = {};
  var sticky = {
    /**
     * @param el {HTMLElement}
     * @param binding {object}
     * @param vnode {object}
     */
    unbind: function unbind(el, binding, vnode) {
      var cancel = cancelHandleObj[vnode.key];
      if (!cancel) return;
      cancel();
      delete cancelHandleObj[vnode.key];
    },

    /**
     * @param el {HTMLElement}
     * @param binding {object}
     * @param vnode {object}
     */
    inserted: function inserted(el, binding, vnode) {
      if (vnode.key === undefined) throw new Error("sticky key required");
      var types = {
        auto: "auto",
        fixed: "fixed",
        sticky: "sticky"
      };
      var value = typeOf(binding.value) === "object" ? binding.value : {};
      var defaultParams = {
        scrollEl: "",
        // 不传时默认window
        type: types.auto,
        // 指定使用 sticky | fixed | auto  // 通常指定使用fixed
        fixedClass: "fixed",
        // fixed模式时fixed的class名
        top: 0,
        // number | string
        zIndex: 1,
        delay: 1000,
        // 延时多少秒开始
        offsetTop: 0 // 离顶部的偏移量

      };
      var params = Object.assign({}, defaultParams, value);
      var oldStyle = pickByKeys(el.style, ["position", "z-index", "top"]);

      function reset() {
        Object.assign(el.style, oldStyle);
      }

      function useFixed() {
        var cancelFn = isFixed(el, function (fixed) {
          var hasClass = el.classList.contains(params.fixedClass);

          if (fixed) {
            if (!hasClass) {
              // $el.addClass(params.fixedClass);
              el.classList.add(params.fixedClass);
              Object.assign(el.style, {
                top: typeof params.top === "number" ? params.top + "px" : params.top,
                "z-index": params.zIndex,
                position: params.type
              });
            }
          } else {
            if (hasClass) {
              el.classList.remove(params.fixedClass);
              reset();
            }
          }
        }, params.offsetTop, params.scrollEl ? document.querySelector(params.scrollEl) : undefined);

        cancelHandleObj[vnode.key] = function () {
          cancelFn();
          reset();
        };
      }

      function useSticky() {
        Object.assign(el.style, {
          top: params.top + "px",
          "z-index": params.zIndex,
          position: types.sticky
        });
      }

      var support = cssSupport("position", types.sticky);
      setTimeout(function () {
        switch (params.type) {
          case types.auto:
            support ? useSticky() : useFixed();
            break;

          case types.sticky:
            useSticky();
            break;

          case types.fixed:
            useFixed();
            break;

          default:
            return;
        }
      }, params.delay);
    }
  };
  /**
   * vue3拖动元素自定义指令
   * @type {{mounted(*, *, *): void}}
   */

  var movable = {
    mounted: function mounted(el, binding, vnode) {
      tsUtils.setStyle({
        touchAction: "none"
      }, {
        el: el
      });
      tsUtils.onDragEvent(function (_ref) {
        var onMove = _ref.onMove,
            onUp = _ref.onUp,
            onDown = _ref.onDown;
        var last = {
          x: 0,
          y: 0
        };
        var offset = {
          x: 0,
          y: 0
        };
        var isDrag = false;
        onDown(function () {
          isDrag = false;
        });
        onMove(function (e, curXY, lastXY, downXY) {
          // 模拟的事件
          if (!e.isTrusted) return;
          var moveX = curXY.x - downXY.x + offset.x;
          var moveY = curXY.y - downXY.y + offset.y;
          last = {
            x: moveX,
            y: moveY
          };
          tsUtils.setStyle({
            transform: "translate(" + moveX + "px," + moveY + "px)"
          }, {
            el: el
          });
          e.preventDefault();
          e.stopPropagation();
          return false;
        });
        onUp(function (e, upXy, downXY) {
          offset = last;

          if (!e.isTrusted) {
            var xy = e.changedTouches[0];
            upXy = {
              x: xy.screenX,
              y: xy.screenY
            };
          }

          isDrag = Math.abs(downXY.x - upXy.x) > 10 || Math.abs(downXY.y - upXy.y) > 10;

          if (!isDrag) {
            return;
          }

          e.preventDefault();
          e.stopPropagation();
          return false;
        });
        el.addEventListener("click", function (e) {
          if (!isDrag) {
            return;
          }

          e.preventDefault();
          e.stopPropagation();
          return false;
        }, true);
      }, {
        el: el,
        capture: {
          down: true,
          up: true,
          move: true
        }
      });
    }
  };
  /**
   * 创建一个object 代替支持es6的动态key
   * @example
   * // {a:1, b:2}
   * createObj(['a', 1], ['b', 2])
   * @return {{}}
   */

  function createObj() {
    var result = {};
    Array.prototype.forEach.call(arguments, function (item) {
      if (typeOf(item) !== "array" || item.length < 1) throw new TypeError("createObj args type error");

      if (item[0] !== undefined) {
        result[item[0]] = item[1];
      }
    });
    return result;
  }
  /**
   * @param reverse {boolean} [reverse=false]
   * @return {number}
   */

  function getFontScale(reverse) {
    if (reverse === void 0) {
      reverse = false;
    }

    var fontSize = 10;
    var div = document.createElement("div");
    document.body.appendChild(div);
    div.style.fontSize = fontSize + "px";
    var realFontSize = getComputedStyle(div).fontSize;
    document.body.removeChild(div); // 微信更新后不会缩放文字了

    if (inWechat()) {
      return 1;
    }

    if (reverse) {
      return fontSize / parseInt(realFontSize);
    }

    return parseInt(realFontSize) / fontSize;
  }
  function inIframe() {
    return Boolean(window.self.frameElement && window.self.frameElement.tagName === "IFRAME" || window.frames.length !== parent.frames.length || window.self !== window.top);
  } // 部分浏览器的Promise没有finally函数

  if (window.Promise && !Promise.prototype["finally"]) {
    Promise.prototype["finally"] = function (callback) {
      this.then().then(callback, callback);
    };
  }

  var valueBindShowMixin = {
    props: {
      value: {
        type: Boolean,
        "default": false
      }
    },
    data: function data() {
      return {
        show: false
      };
    },
    watch: {
      value: {
        handler: function handler(n) {
          this.show = n;
        },
        immediate: true
      },
      show: function show(n) {
        this.$emit("update:value", n);
      }
    }
  };
  /**
   * 判断是否微信
   * @returns {boolean}
   */

  function inWechat() {
    // userAgent
    var ua = window.navigator.userAgent.toLowerCase();
    return /MicroMessenger/i.test(ua);
  }
  function isIos() {
    return !!navigator.userAgent.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/);
  }
  /**
   * 通过name查找vue组件的父元素
   * @param component 组件实例
   * @param parentName 父组件的name
   * @return {null|*}
   */

  function findVueParentComponent(component, parentName) {
    if (!component) return null;

    if (component.$options.name === parentName) {
      return component;
    }

    return findVueParentComponent(component.$parent, parentName);
  } // 兼容原来的用法

  var findParent = findVueParentComponent; // 淘宝并且微信打开，且非ios
  // const getSync = (platformType) => platformType === "tb" && inWechat() && !isIos();
  // const getSync = (platformType) => (platformType === "tb" || platformType === "ks") && inWechat() && !isIos();
  // 淘宝并且微信打开就复制

  // 判断微博的
  function isWeiBo(){
    const ua = navigator.userAgent.toLowerCase();
    return /WeiBo/i.test(ua);
  }
  
  /* 1，ios + 非微博 走唤醒
     2，ios + 微博 或 安卓 走复制口令
  */
  const getSync = function (platformType) { // 为true 时 为复制内容  false 的时候是弹窗唤醒
    if (platformType === "tb") {
      return inWechat() && !isIos()
    } else if (platformType === "ks"){
      if (isIos() && !isWeiBo()) {
        if (isIos() && !inWechat()) {
          return true
        } else {
          return false
        }
      }
      if (isIos() && isWeiBo()) {
        return true
      }
      if (!isIos()) {
        return true
      }
    } else if (platformType === "jd" || platformType === "pdd") {
      return false
    } else if (platformType === "dy") {
      /* ios 非微博情况下*/
      if (!isIos()) {
        return true
      }
      if (isIos() && isWeiBo()){
        return true
      }
    } else {
      return true
    }
  }

  // var getSync = function getSync(platformType) {
  //   return platformType === "tb" && inWechat();
  // };
  /**
   * 选择跳页或复制
   * @param res
   * @return {boolean}
   */


  function selectOpenOrCopy(res) {
    var params = res._params || {};

    function openPage() {
      var _res$data, _res$data2, _res$data3;
      /* 
        快手判断
        ios+微信环境，转链字段取ioslinkUrl
        安卓+微信环境，取commandContent
        安卓非微信环境，取kwaiUrl
       */
      /* 
        微信+IOS = 唤醒APP
        微信+安卓 = 复制口令
        微博 = 复制口令
        安卓 = 复制口令
      */
      var ksData_url;
      /* if (inWechat() && isIos()) {
        ksData_url = res.data.ioslinkUrl
      } else if (inWechat() && !isIos()){
        ksData_url = res.data.commandContent
      } else if (!inWechat() && !isIos()){
        ksData_url = res.data.kwaiUrl
      } else {
        ksData_url = res.data.kwaiUrl
      } */
      if (inWechat() && isIos()) {
        ksData_url = res.data.ioslinkUrl
      } else {
        ksData_url = res.data.commandContent
        
      }
      var url = res.link || res.url || res.data.dy_zlink || ((_res$data = res.data) == null ? void 0 : _res$data.link) || ((_res$data2 = res.data) == null ? void 0 : _res$data2.short_url) || ((_res$data3 = res.data) == null ? void 0 : _res$data3.url) || (ksData_url == null ? void 0 : ksData_url);

      if (!url) {
        exports.toast("链接获取失败");
        return;
      }

      window.top.location = url;
    }

    var copyCode = function copyCode() {
      var getCopyTarget = function getCopyTarget(res) {
        var _res$data4, _res$data5;

        var def = ((_res$data4 = res.data) == null ? void 0 : _res$data4.short_url) || ((_res$data5 = res.data) == null ? void 0 : _res$data5.url) || res.link || res.url || res.data;
        return (params.getCopyTarget || function () {})(res) || def;
      };

      copy(getCopyTarget(res), params.copySuccessMsg || "复制成功", "复制失败,请点击重试");
    };

    var select = function select() {
      var message = params.openPageTips || "是否跳转到下单页面?";

      if (window.vant) {
        vant.Dialog.confirm({
          message: message
        }).then(openPage, copyCode);
      } else {
        layer.confirm(message, function (index) {
          openPage();
          layer.close(index);
        }, copyCode);
      }
    };

    select();
  } // cms转链带上token  源码不需要

  function getCmsToken() {
    var cid = parseSearch().cid;
    if (!cid) return;
    var userInfo = localStorage.getItem("_" + cid + "_userInfo");
    if (!userInfo) return;

    try {
      var _userInfo$data;

      /**
       * @type {{ data: {token:string}}}
       */
      userInfo = JSON.parse(userInfo);
      return (_userInfo$data = userInfo.data) == null ? void 0 : _userInfo$data.token;
    } catch (e) {}
  }
  /**
   * 通用转链
   * @param params {{}}
   * @param {string} params.url  转链链接
   * @param {object} params.data  转链参数
   * @param {{}?} params.itemData  如果传了itemData，转链成功时会缓存结果,去除重复请求
   * @param {{}?} params.itemData.resCache  转链结果缓存
   * @param {boolean?} params.sync  是否使用同步请求 如果为undefined的话则自动判断
   * @param {HTMLElement?} params.el  同步请求复制淘口令或链接时挂载到的dom上 最好用capture的方式绑定触发事件
   * @param {Function?} params.getCopyTarget  同步请求复制回调  返回要复制的文字或dom
   * @param {string?} params.copySuccessMsg   复制成功提示信息
   * @param {string?} params.openPageTips   异步转链成功后，跳转页面时的提示文字
   * @param {Function?} params.requestCB   回调 返回false时，拦截默认行为; 可以在此res.link = xxxx 或者改些提示信息之类的
   * @param {Function?} params.getSync   获取sync值的函数
   * @param {Function?} params.selectOpenOrCopy   选择是用跳转还是复制的函数
   * @param {string?} params.platformType   平台类型
   * @return {Promise}
   */


  function conversionLink(params) {
    var _params$itemData2;

    if (params === void 0) {
      params = {};
    }

    var url = params.url;
    var data = params.data || {}; // cms转链带上token

    var token = getCmsToken();

    if (token && !data.token) {
      data.token = token;
    }

    if (params.sync === undefined) {
      // 淘宝并且微信打开，且非ios
      params.sync = (params.getSync || getSync)(params.platformType || "tb");
      // console.log('params.sync', params.sync);
    }

    if (params.sync) {
      var _params$itemData;

      var cb = function cb(res) {
        var _params$el;

        params.itemData && (params.itemData.resCache = res);
        if (params.requestCB && params.requestCB(res) === false) return;
        var el = ((_params$el = params.el) == null ? void 0 : _params$el.parentElement) || params.el;

        var getCopyTarget = function getCopyTarget(res) {
          var def = res.data || res.link;
          return (params.getCopyTarget || function () {}).call(params, res) || def;
        };

        if (el) {
          el.addEventListener("click", function handler() {
            copy(getCopyTarget(res), params.copySuccessMsg || "复制成功");
            el.removeEventListener("click", handler);
          });
        } else {
          copy(getCopyTarget(res), params.copySuccessMsg || "复制成功");
        }
      };

      var _cache = (_params$itemData = params.itemData) == null ? void 0 : _params$itemData.resCache;

      if (_cache) {
        cb(_cache);
        return Promise.resolve(_cache);
      }

      return Request.postSync(url, data, cb).promise;
    }

    var cache = (_params$itemData2 = params.itemData) == null ? void 0 : _params$itemData2.resCache;
    var p = cache ? Promise.resolve(cache) : Request.post(url, data).promise;
    p.then(function (res) {
      params.itemData && (params.itemData.resCache = res);
      res._params = params;

      if (params.requestCB && params.requestCB(res) === false) {
        return;
      }
      // (params.selectOpenOrCopy || selectOpenOrCopy)(res);
      selectOpenOrCopy(res);
    });
    return p;
  }
  /**
   * 数字10000以下保持原样，以上的以'万'为单位
   * @param num
   * @param [digits=2] 小数位
   * @return {string|*}
   */

  function numWan(num, digits) {
    if (digits === void 0) {
      digits = 2;
    }

    var w = 10000;
    if (num < w) return num;
    return Number((num / w).toFixed(digits)) + "万";
  }
  var getMoneyStr = numWan;
  /**
   * 组装url query
   * @param {{}} params
   * @param {string} urlParams
   * @param {string[]} removeKeyList 需要去掉的key
   * @param [removeEmpty=true] 去除空值的key
   * @returns {URLSearchParams}
   */

  function buildQuery(params, urlParams, removeKeyList, removeEmpty) {
    if (urlParams === void 0) {
      urlParams = location.search;
    }

    if (removeKeyList === void 0) {
      removeKeyList = [];
    }

    var _params = new URLSearchParams(urlParams);

    removeKeyList.forEach(function (key) {
      _params["delete"](key);
    });

    for (var _i = 0, _arr = [].concat(_params.entries()); _i < _arr.length; _i++) {
      var _arr$_i = _arr[_i],
          k = _arr$_i[0],
          v = _arr$_i[1];

      if (!v) {
        _params["delete"](k);
      }
    }

    for (var _k in params) {
      _params.set(_k, params[_k]);
    }

    return _params;
  }
  /**
   * 切换路由参数
   * @param [params={}]
   * @param [template='{pathname}?{params}#{hash}']
   * @param {string[]} removeKeyList
   * @return {boolean}
   */

  function historyReplaceState(params, template, removeKeyList) {
    if (params === void 0) {
      params = {};
    }

    if (template === void 0) {
      template = "{pathname}{params}{hash}";
    }

    if (removeKeyList === void 0) {
      removeKeyList = [];
    }

    if (window.URLSearchParams) {
      var _params = buildQuery(params, location.search, removeKeyList);

      var match = {
        "{pathname}": function pathname() {
          return location.pathname;
        },
        "{params}": function params() {
          return "?" + _params.toString();
        },
        "{hash}": function hash() {
          return location.hash;
        }
      };

      for (var k in match) {
        var fn = match[k];
        template = template.replace(new RegExp(k, "g"), fn());
      }

      history.replaceState(null, "", template);
      return true;
    }
  }
  /**
   * 拼接其他单页的链接
   * @param tmp {string}
   * @param [withFromUrl=true]
   * @param [withHash=true]
   * @return {string}
   */

  function getSpaUrl(tmp, withFromUrl, withHash) {
    if (withFromUrl === void 0) {
      withFromUrl = true;
    }

    if (withHash === void 0) {
      withHash = true;
    }

    var url = location.pathname;
    var params = new URLSearchParams(location.search);
    params.set("tmp", tmp);
    withFromUrl && params.set("fromUrl", encodeURIComponent(location.href));
    url += "?" + params.toString();
    withHash && (url += location.hash);
    return url;
  }
  /**
   * 获取时间戳，半小时更新一次；如果url上带了clearCache，那么会实时更新
   * @return {number|number}
   */

  function getTimeStamp() {
    var clearCache = parseSearch().clearCache;
    var now = Date.now();
    return clearCache ? now : now - now % (60 * 1000 * 30);
  }
  function assignToWindow() {
    Object.assign(window, window.SpaUtils);
  } // 兼容原来的用法

  document.currentScript && (document.currentScript.onload = assignToWindow);

  exports.Request = Request;
  exports.addProtocol = addProtocol;
  exports.assignToWindow = assignToWindow;
  exports.buildQuery = buildQuery;
  exports.conversionLink = conversionLink;
  exports.copy = copy;
  exports.copyText = copyText;
  exports.createObj = createObj;
  exports.cssSupport = cssSupport;
  exports.findParent = findParent;
  exports.findVueParentComponent = findVueParentComponent;
  exports.formatDate = formatDate;
  exports.getFontScale = getFontScale;
  exports.getFormatStr = getFormatStr;
  exports.getMoneyStr = getMoneyStr;
  exports.getSpaUrl = getSpaUrl;
  exports.getTimeStamp = getTimeStamp;
  exports.historyReplaceState = historyReplaceState;
  exports.inIframe = inIframe;
  exports.inWechat = inWechat;
  exports.isDom = isDom;
  exports.isFixed = isFixed;
  exports.isIos = isIos;
  exports.isScrollEnd = isScrollEnd;
  exports.loadImg = loadImg;
  exports.movable = movable;
  exports.noScroll = noScroll;
  exports.numWan = numWan;
  exports.parseSearch = parseSearch;
  exports.pickByKeys = pickByKeys;
  exports.pickRename = pickRename;
  exports.prefixStyle = prefixStyle;
  exports.replaceToast = replaceToast;
  exports.select = select;
  exports.selectOpenOrCopy = selectOpenOrCopy;
  exports.sticky = sticky;
  exports.typeOf = typeOf;
  exports.url = url;
  exports.valueBindShowMixin = valueBindShowMixin;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
